<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:lang="http://www.springframework.org/schema/lang"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-2.5.xsd">
 <!-- 整合Red5的Spring配置文件，使得Red5的开发能够像普通的基于Spring的WEB应用 一样-->
	<!--
	Defines the web context
	使用这个Context类可以避免red5寻找red5.xml和red5.core
	-->
	<bean id="web.context" class="com.systop.fsmis.video.Context" 
		autowire="byType" />
	<!-- 使用这个Context类可以避免red5寻找red5.xml和red5.core -->
	<bean id="global.context" class="com.systop.fsmis.video.Context" 
		autowire="byType" />
	<!--
	Defines the web scopes
	-->
	<bean id="web.scope" class="org.red5.server.WebScope"
		 init-method="register">
		<property name="server" ref="red5.server" />
		<property name="parent" ref="global.scope" />
		<property name="context" ref="web.context" />
		<property name="handler" ref="web.handler" />
		<property name="contextPath" value="${webapp.contextPath}" />
		<property name="virtualHosts" value="${webapp.virtualHosts}" />
	</bean>
	
	<!--
	Defines the web handler which acts as an applications endpoint
	-->
	<bean id="web.handler" class="com.systop.fsmis.video.Application">
	   <property name="ghostConnsCleanupPeriod" value="300"></property>
	</bean>
	
	<bean id="customEditorConfigurer"
		class="org.springframework.beans.factory.config.CustomEditorConfigurer">
		<property name="customEditors">
			<map>
				<entry key="java.net.SocketAddress">
					<bean
						class="org.apache.mina.integration.beans.InetSocketAddressEditor" />
				</entry>
			</map>
		</property>
	</bean>
	
    <!-- Socket policy handler -->
    <!-- Off by default to prevent confusion - turn it on if you need it
    <bean id="socketPolicyHandler"
        class="org.red5.server.net.policy.SocketPolicyHandler" init-method="start" destroy-method="stop">
        <property name="host" value="${policy.host}" />
        <property name="port" value="${policy.port}" />
    </bean>
	-->
	
	<!-- RTMP -->
	
	<bean id="rtmpMinaConnManager"
		class="org.red5.server.net.rtmp.RTMPConnManager">
	</bean>
	    
	<!-- RTMP Handler -->
	<bean id="rtmpHandler"
		class="org.red5.server.net.rtmp.RTMPHandler">
		<property name="server" ref="red5.server" />
		<property name="statusObjectService" ref="statusObjectService" />
	</bean>
	
	<!-- RTMP Mina IO Handler -->
	<bean id="rtmpMinaIoHandler"
		class="org.red5.server.net.rtmp.RTMPMinaIoHandler">
		<property name="handler" ref="rtmpHandler" />
		<property name="codecFactory" ref="rtmpCodecFactory" />
		<property name="rtmpConnManager" ref="rtmpMinaConnManager" />
	</bean>
	
	<!-- RTMP Mina Transport -->
	<bean id="rtmpTransport" class="org.red5.server.net.rtmp.RTMPMinaTransport" init-method="start" destroy-method="stop">
		<property name="ioHandler" ref="rtmpMinaIoHandler" />
        <property name="connectors">
            <list>
                <bean class="java.net.InetSocketAddress">
                    <constructor-arg index="0" type="java.lang.String" value="${rtmp.host}" />  
                    <constructor-arg index="1" type="int" value="${rtmp.port}" />  
                </bean>
                <!-- You can now add additional ports and ip addresses
                <bean class="java.net.InetSocketAddress">
                    <constructor-arg index="0" type="java.lang.String" value="${rtmp.host}" />  
                    <constructor-arg index="1" type="int" value="1936" />  
                </bean>
                 -->
            </list>
        </property>
		<property name="receiveBufferSize" value="${rtmp.receive_buffer_size}" />
		<property name="sendBufferSize" value="${rtmp.send_buffer_size}" />
		<property name="eventThreadsCore" value="${rtmp.event_threads_core}" />
		<property name="eventThreadsMax" value="${rtmp.event_threads_max}" />
		<property name="eventThreadsQueue" value="${rtmp.event_threads_queue}" />
		<property name="eventThreadsKeepalive" value="${rtmp.event_threads_keepalive}" />
		<!-- This is the interval at which the sessions are polled for stats. If mina monitoring is not
				enabled, polling will not occur. -->
		<property name="jmxPollInterval" value="1000" />
		<property name="tcpNoDelay" value="${rtmp.tcp_nodelay}" />
	</bean>
	
	<!-- RTMP Mina Connection -->
	<bean id="rtmpMinaConnection" scope="prototype"
		class="org.red5.server.net.rtmp.RTMPMinaConnection">
		<!-- Ping clients every X ms. Set to 0 to disable ghost detection code. -->
		<property name="pingInterval" value="${rtmp.ping_interval}" />
		<!-- Disconnect client after X ms of not responding. -->
		<property name="maxInactivity" value="${rtmp.max_inactivity}" />
		<!-- Max. time in milliseconds to wait for a valid handshake. -->
		<property name="maxHandshakeTimeout" value="5000" />
	</bean>
	
	<!-- RTMPT -->
	
	<bean id="rtmptConnManager"
		class="org.red5.server.net.rtmp.RTMPConnManager">
	</bean>
	
	<!-- RTMPT Handler -->
	<bean id="rtmptHandler"
		class="org.red5.server.net.rtmpt.RTMPTHandler" autowire="byType">
		<property name="codecFactory" ref="rtmpCodecFactory" />
	</bean>
	
	<!-- Use injection to store RTMPT handler in servlet -->
	<bean id="rtmptServlet"
		class="org.red5.server.net.rtmpt.RTMPTServlet">
		<property name="handler" ref="rtmptHandler" />
		<property name="rtmpConnManager" ref="rtmptConnManager" />
	</bean>
	
	<!-- RTMPT Connection -->
	<bean id="rtmptConnection" scope="prototype"
		class="org.red5.server.net.rtmpt.RTMPTConnection">
		<!-- Ping clients every X ms. Set to 0 to disable ghost detection code. -->
		<property name="pingInterval" value="${rtmp.ping_interval}" />
		<!-- Disconnect client after X ms of not responding. -->
		<property name="maxInactivity" value="${rtmp.max_inactivity}" />
		<!-- Max. time in milliseconds to wait for a valid handshake. -->
		<property name="maxHandshakeTimeout" value="5000" />
	</bean>
	
	<!-- Server bean -->
	<bean id="red5.server" class="org.red5.server.Server"/>
	
	<!-- Serializes objects to AMF binary -->
	<bean id="serializer" class="org.red5.io.object.Serializer"/>
	<!-- Deserializes objects from AMF binary -->
	<bean id="deserializer" class="org.red5.io.object.Deserializer"/>
	<!-- Deals with StatusObjects representing statuses like FMS NetConnection.Connect.Success status -->
	<bean id="statusObjectService" class="org.red5.server.net.rtmp.status.StatusObjectService"
		 autowire="byType" init-method="initialize"/>
	<!-- RTMP codec factory -->
	<bean id="rtmpCodecFactory" class="org.red5.server.net.rtmp.codec.RTMPMinaCodecFactory"
		 autowire="byType" init-method="init">
		<property name="minaEncoder">
			<bean class="org.red5.server.net.rtmp.codec.RTMPMinaProtocolEncoder">
				<property name="serializer">
					<ref bean="serializer"/>
				</property>
			</bean>
		</property>
		<property name="minaDecoder">
			<bean class="org.red5.server.net.rtmp.codec.RTMPMinaProtocolDecoder">
				<property name="deserializer">
					<ref bean="deserializer"/>
				</property>
			</bean>
		</property>
	</bean>
	<!-- Remoting calls codec factory -->
	<bean id="remotingCodecFactory" class="org.red5.server.net.remoting.codec.RemotingCodecFactory"
		 autowire="byType" init-method="init"/>
	<!-- Video codec factory -->
	<bean id="videoCodecFactory" class="org.red5.server.stream.VideoCodecFactory">
		<property name="codecs">
			<list>
				<bean id="screenVideoCodec" class="org.red5.server.stream.codec.ScreenVideo"/>
				<bean id="sorensonVideoCodec" class="org.red5.server.stream.codec.SorensonVideo"/>
			</list>
		</property>
	</bean>
	<!-- Streamable file factory -->
	<bean id="streamableFileFactory" class="org.red5.io.StreamableFileFactory">
		<property name="services">
			<list>
				<bean id="flvFileService" class="org.red5.io.flv.impl.FLVService">
					<property name="generateMetadata" value="true"/>
				</bean>
				<bean id="mp3FileService" class="org.red5.io.mp3.impl.MP3Service"/>
			</list>
		</property>
	</bean>
	<!-- Thread that writes modified objects to disk periodically -->
	<bean id="filePersistenceThread" class="org.red5.server.persistence.FilePersistenceThread"/>
	<!-- Handles creation / lookup of shared objects -->
	<bean id="sharedObjectService" class="org.red5.server.so.SharedObjectService">
		<property name="persistenceClassName">
			<value>org.red5.server.persistence.FilePersistence</value>
		</property>
	</bean>
	<!-- High level access to streams -->
	<bean id="streamService" class="org.red5.server.stream.StreamService"/>
	<!-- High level access to broadcasted streams -->
	<bean id="providerService" class="org.red5.server.stream.ProviderService"/>
	<!-- Provides output to consumers -->
	<bean id="consumerService" class="org.red5.server.stream.ConsumerService"/>
	<!-- Simple bandwidth control -->
	<bean id="BWControlService" class="org.red5.server.stream.SimpleBWControlService" init-method="init" destroy-method="shutdown">
		<property name="interval" value="100"/>
		<property name="defaultCapacity" value="104857600"/>
		<!-- 100MB -->
	</bean>
	<!-- Dummy bandwidth control that does nothing -->
	<!--
    <bean id="BWControlService" class="org.red5.server.stream.DummyBWControlService"/> -->
	<!-- Scheduling service -->
	<bean id="schedulingService" class="org.red5.server.scheduling.QuartzSchedulingService"/>
		 
    <!-- War deployer -->
    <bean id="warDeployService" class="org.red5.server.service.WarDeployer" init-method="init" destroy-method="shutdown">
        <property name="scheduler" ref="schedulingService"/>
        <property name="checkInterval" value="600000"/>
        <property name="deploymentDirectory" value="${red5.root}/webapps"/>
    </bean>		 
		 
	<!-- Threadpool settings for the remoting clients -->
	<bean id="remotingPool" class="org.red5.server.pooling.ThreadPool">
		<property name="poolSize" value="8"/>
	</bean>
	<!-- Use injection to setup thread pool for remoting clients -->
	<bean id="remotingClient" class="org.red5.server.net.remoting.RemotingClient">
		<property name="threadPool" ref="remotingPool"/>
	</bean>
	<!--
	Now we can load the cache engine, only one may be enabled at a time. If no-caching is required select the
	NoCacheImpl. Three other implementations based on EhCache, WhirlyCache, and Red5Cache are also available.
	-->
	<bean id="object.cache" class="org.red5.server.cache.NoCacheImpl"/>
	<!--
	<bean id="object.cache" class="org.red5.server.cache.CacheImpl" init-method="init" autowire="byType">
		<property name="maxEntries"><value>5</value></property>
	</bean>

	<bean id="object.cache" class="org.red5.server.cache.EhCacheImpl" init-method="init">
		<property name="diskStore" value="java.io.tmpdir" />
		<property name="memoryStoreEvictionPolicy" value="LFU" />
		<property name="cacheManagerEventListener"><null/></property>
		<property name="cacheConfigs">
			<list>
				<bean class="net.sf.ehcache.config.CacheConfiguration">
					<property name="name" value="flv.cache" />
					<property name="maxElementsInMemory" value="5" />
					<property name="eternal" value="false" />
					<property name="timeToIdleSeconds" value="0" />
					<property name="timeToLiveSeconds" value="0" />
					<property name="overflowToDisk" value="false" />
					<property name="diskPersistent" value="false" />
				</bean>
			</list>
		</property>
	</bean>
-->
	<!--
	    Cache to use for keyframe metadata.
	-->
	<bean id="keyframe.cache" class="org.red5.io.CachingFileKeyFrameMetaCache">
		<property name="maxCacheEntry" value="500" />
	</bean>
	<!--
	    Represents FLV files
	    Use injection to set the cache impl to be used with flvs
	-->
	<bean id="flv.impl" class="org.red5.io.flv.impl.FLV">
		<property name="cache">
			<ref bean="object.cache"/>
		</property>
	</bean>
	<!-- Use injection to set the keyframe cache for FLV files -->
	<bean id="flvreader.impl" class="org.red5.io.flv.impl.FLVReader">
		<property name="keyFrameCache">
			<ref bean="keyframe.cache"/>
		</property>
	</bean>
	<!-- Use injection to set the keyframe cache for MP3 files -->
	<bean id="mp3reader.impl" class="org.red5.io.mp3.impl.MP3Reader">
		<property name="frameCache">
			<ref bean="keyframe.cache"/>
		</property>
	</bean>
	<!-- Use injection to set the buffer type for reading FLV files -->
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod">
			<value>org.red5.io.flv.impl.FLVReader.setBufferType</value>
		</property>
		<!-- Three buffer types are available 'auto', 'heap', and 'direct' -->
		<property name="arguments" value="auto"/>
	</bean>
	<!-- Use injection to set the buffer size for reading FLV files -->
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod">
			<value>org.red5.io.flv.impl.FLVReader.setBufferSize</value>
		</property>
		<!-- Three buffer types are available 'auto', 'heap', and 'direct' -->
		<property name="arguments" value="4096"/>
	</bean>
	<!-- Executor that will be used to schedule stream playback to keep
		the client buffer filled.
	-->
	<bean id="streamExecutor" class="java.util.concurrent.ScheduledThreadPoolExecutor">
		<constructor-arg value="4"/>
		<property name="maximumPoolSize" value="32"/>
	</bean>
	<!-- ClientBroadcastStream and PlaylistSubscriberStream
		that will be used by RTMPConnection and maybe other classes.
		These beans are lazy-init because most likely server will need
		to be up and running before we can get a smart implementation
		of these streams
	-->
	<bean id="playlistSubscriberStream" scope="prototype" lazy-init="true" class="org.red5.server.stream.PlaylistSubscriberStream">
		<property name="executor" ref="streamExecutor"/>
		<!-- Check for buffer underruns every X ms and generate NetStream.Play.InsufficientBW accordingly.
		     Set to 0 to disable. Be careful not to set this value too small to avoid network congestion.
		  -->
		<property name="bufferCheckInterval" value="5000"/>
		<!-- A NetStream.Play.InsufficientBW message is generated if more than X messages are queued for sending on the connection.
		     This value will also control the maximum pending messages on the server. To use a smaller value on slow connections
		     to get smaller delay for downstream server commands.
		  -->
		<property name="underrunTrigger" value="100"/>
	</bean>
	<bean id="clientBroadcastStream" scope="prototype" lazy-init="true" class="org.red5.server.stream.ClientBroadcastStream"/>
<!-- DEFAULT GLOBAL CONTEXT -->
	
	<bean id="global.clientRegistry" class="org.red5.server.ClientRegistry" />
	
	<bean id="global.serviceInvoker" class="org.red5.server.service.ServiceInvoker">
		<property name="serviceResolvers">
			<list>
				<bean id="scopeServiceResolver" class="org.red5.server.service.ScopeServiceResolver"/>
				<bean id="handlerServiceResolver" class="org.red5.server.service.HandlerServiceResolver"/>
				<bean id="contextServiceResolver" class="org.red5.server.service.ContextServiceResolver"/>
			</list>
		</property>
	</bean>
	
	<bean id="global.mappingStrategy" class="org.red5.server.MappingStrategy" />
	

	<bean id="global.handler" class="org.red5.server.CoreHandler" autowire="byType" />
			
	<bean id="global.scope" class="org.red5.server.GlobalScope"
		 init-method="register">
		<property name="server" ref="red5.server" />
		<property name="name" value="default" />
		<property name="context" ref="global.context" />
		<property name="handler" ref="global.handler" />
		<property name="persistenceClass">
			<value>org.red5.server.persistence.FilePersistence</value>
		</property>
	</bean>
	
	<bean id="red5.scopeResolver" class="org.red5.server.ScopeResolver">
		<property name="globalScope" ref="global.scope" />
	</bean>
	
		
	
 
</beans>
